name: GitOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-manifests:
    name: Lint Kubernetes Manifests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kube-linter
      run: |
        curl -L https://github.com/stackrox/kube-linter/releases/download/v0.6.8/kube-linter-linux.tar.gz | tar xz
        sudo mv kube-linter /usr/local/bin/

    - name: Lint Kubernetes manifests with config
      run: |
        echo "Linting all Kubernetes manifests with kube-linter..."
        kube-linter lint environments/ --config .kube-linter.yaml

  validate-kustomize:
    name: Validate Kustomize Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate kustomize output
      run: |
        for dir in $(find . -name kustomization.yaml -exec dirname {} \;); do
          echo "Validating Kustomize directory: $dir"
          kustomize build "$dir" | kubectl apply --dry-run=client -f -
        done

  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes YAML syntax
      run: |
        echo "Validating YAML syntax..."
        find environments/ -name "*.yaml" -exec kubectl --dry-run=client apply -f {} \;

    - name: Check for required fields
      run: |
        echo "Checking for required Kubernetes fields..."
        for file in environments/*/dev-app.yaml environments/*/prod-app.yaml; do
          if [ -f "$file" ]; then
            echo "Checking $file"
            grep -q "apiVersion:" "$file" || (echo "ERROR: $file missing apiVersion" && exit 1)
            grep -q "kind:" "$file" || (echo "ERROR: $file missing kind" && exit 1)
            grep -q "metadata:" "$file" || (echo "ERROR: $file missing metadata" && exit 1)
          fi
        done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

    - name: Check for secrets in files
      run: |
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key" environments/ --include="*.yaml" | grep -v "secretKeyRef" | grep -v "# " | grep -v "name:.*secret"; then
          echo "WARNING: Potential secrets found in manifests"
          echo "Make sure all secrets are properly encrypted or use secretKeyRef"
        else
          echo "No plain text secrets found - good!"
        fi